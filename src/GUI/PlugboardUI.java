/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import enigma.Enigma;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.geom.Point2D;
import java.awt.geom.QuadCurve2D;
import java.util.HashMap;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

/**
 *
 * @author facud
 */
public class PlugboardUI extends javax.swing.JFrame {
    private JFrame parent;
    private Enigma enigma;
    private Map<Character, Point2D> points;
    private boolean draw = false;
    private final Pattern validInput = Pattern.compile("([A-Z][A-Z]\\s){0,10}");;
    
    /**
     * Creates new form Plugboard
     */
    public PlugboardUI() {
        initComponents();
        myInitComponents();
    }
    
    public PlugboardUI(JFrame parent, Enigma enigma){
        this();
        this.parent = parent;
        this.enigma = enigma;
    }
    
    private void myInitComponents(){
        this.points = loadPoints();
        setLocationRelativeTo(this.parent);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        plugboardPanel = new javax.swing.JPanel();
        connectionsTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        plugboardBackground = new javax.swing.JLabel(){
            public void paintComponent(Graphics g){
                super.paintComponent(g);
                drawCables(g);
            }
        };

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Plugboard");
        setAlwaysOnTop(true);
        setSize(new java.awt.Dimension(818, 375));
        setType(java.awt.Window.Type.UTILITY);

        plugboardPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        connectionsTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectionsTextFieldActionPerformed(evt);
            }
        });
        connectionsTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                connectionsTextFieldKeyReleased(evt);
            }
        });
        plugboardPanel.add(connectionsTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 335, 730, 30));

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(204, 255, 255));
        jLabel1.setText("Ingresar hasta 10 cables (Ej: QL AK PY ...):");
        plugboardPanel.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 315, -1, -1));

        plugboardBackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/plugboard.jpg"))); // NOI18N
        plugboardPanel.add(plugboardBackground, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(plugboardPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(plugboardPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void connectionsTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectionsTextFieldActionPerformed
        if(validateTextField((JTextField)evt.getSource())){
            loadCablesToEnigma();
            //this.draw = true;
            this.plugboardBackground.revalidate();
            this.plugboardBackground.repaint();
            JOptionPane.showMessageDialog(this, "Se cargó el plugboard con éxito", "Éxito", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_connectionsTextFieldActionPerformed

    private void connectionsTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_connectionsTextFieldKeyReleased
        validateTextField((JTextField)evt.getSource());
        //this.draw = false;
    }//GEN-LAST:event_connectionsTextFieldKeyReleased

    private Map<Character, Point2D> loadPoints(){
        Map<Character, Point2D> coordinates = new HashMap<>();
        
        coordinates.put('Q', new Point2D.Double(73, 90));
        coordinates.put('W', new Point2D.Double(156, 90));
        coordinates.put('E', new Point2D.Double(245, 90));
        coordinates.put('R', new Point2D.Double(333, 90));
        coordinates.put('T', new Point2D.Double(421, 90));
        coordinates.put('Z', new Point2D.Double(506, 90));
        coordinates.put('U', new Point2D.Double(591, 90));
        coordinates.put('I', new Point2D.Double(674, 90));
        coordinates.put('O', new Point2D.Double(767, 90));
        coordinates.put('A', new Point2D.Double(106, 190));
        coordinates.put('S', new Point2D.Double(190, 190));
        coordinates.put('D', new Point2D.Double(280, 190));
        coordinates.put('F', new Point2D.Double(366, 190));
        coordinates.put('G', new Point2D.Double(455, 190));
        coordinates.put('H', new Point2D.Double(541, 190));
        coordinates.put('J', new Point2D.Double(627, 190));
        coordinates.put('K', new Point2D.Double(711, 190));
        coordinates.put('P', new Point2D.Double(50, 283));
        coordinates.put('Y', new Point2D.Double(136, 283));
        coordinates.put('X', new Point2D.Double(224, 283));
        coordinates.put('C', new Point2D.Double(313, 283));
        coordinates.put('V', new Point2D.Double(398, 283));
        coordinates.put('B', new Point2D.Double(488, 283));
        coordinates.put('N', new Point2D.Double(571, 283));
        coordinates.put('M', new Point2D.Double(654, 283));
        coordinates.put('L', new Point2D.Double(745, 283));
        
        return coordinates;
    }
    
    private void drawCables(Graphics g){
        Graphics2D g2 = (Graphics2D)g;
        Map<Character, Character> connections = this.enigma.getPlugboard().getConnections();
        double controlY = this.plugboardBackground.getBounds().getMaxY();
        
        for(Map.Entry<Character, Character> entry : connections.entrySet()){
            Point2D firstLetterPoint = points.get(entry.getKey());
            Point2D secondLetterPoint = points.get(entry.getValue());
            double controlX = (firstLetterPoint.getX() + secondLetterPoint.getX()) / 2;
            QuadCurve2D curve = new QuadCurve2D.Double(firstLetterPoint.getX(), firstLetterPoint.getY(),
                    controlX, controlY, secondLetterPoint.getX(), secondLetterPoint.getY());
            g2.setStroke(new BasicStroke(10));
            Color color = new Color(20, 20, 20);
            g2.setPaint(color);
            g2.draw(curve);
            ImageIcon img = new ImageIcon(getClass().getResource("/resources/images/plug.png"));
            g2.drawImage(img.getImage(), (int) firstLetterPoint.getX() - 30 / 2,
                    (int) firstLetterPoint.getY() - 30 / 2, this.plugboardBackground);
            g2.drawImage(img.getImage(), (int) secondLetterPoint.getX() - 30 / 2,
                    (int) secondLetterPoint.getY() - 30 / 2, this.plugboardBackground);
        }
        
    }
    
    /*private void drawCables(Graphics g) {
        if (this.draw) {
            Graphics2D g2 = (Graphics2D) g;
            String[] connections = this.connectionsTextField.getText().split(" ");
            double controlY = this.plugboardBackground.getBounds().getMaxY();

            for (String connection : connections) {
                if (!connection.equals("")) {
                    Point2D firstLetterPoint = points.get(connection.charAt(0));
                    Point2D secondLetterPoint = points.get(connection.charAt(1));
                    double controlX = (firstLetterPoint.getX() + secondLetterPoint.getX()) / 2;
                    QuadCurve2D curve = new QuadCurve2D.Double(firstLetterPoint.getX(), firstLetterPoint.getY(),
                            controlX, controlY, secondLetterPoint.getX(), secondLetterPoint.getY());
                    g2.setStroke(new BasicStroke(10));
                    Color color = new Color(20, 20, 20);
                    g2.setPaint(color);
                    g2.draw(curve);
                    ImageIcon img = new ImageIcon(getClass().getResource("/resources/images/plug.png"));
                    g2.drawImage(img.getImage(), (int) firstLetterPoint.getX() - 30 / 2,
                            (int) firstLetterPoint.getY() - 30 / 2, this.plugboardBackground);
                    g2.drawImage(img.getImage(), (int) secondLetterPoint.getX() - 30 / 2,
                            (int) secondLetterPoint.getY() - 30 / 2, this.plugboardBackground);
                }
            }
        }
    }*/
    
    private boolean validateTextField(JTextField textField){
        Matcher matcher = validInput.matcher(textField.getText());
        
        if(!matcher.matches()){
            textField.setBorder(BorderFactory.createLineBorder(Color.RED, 3));
            return false;
        }
        else{
            textField.setBorder(BorderFactory.createLineBorder(Color.GREEN, 3));
            return true;
        }
    }
    
    private void loadCablesToEnigma(){
        String[] connections = this.connectionsTextField.getText().split(" ");
        
        this.enigma.getPlugboard().resetPlugboard();
        for(String connection : connections){
            if(!connection.equals("")){
                char letter1 = connection.charAt(0);
                char letter2 = connection.charAt(1);
                this.enigma.getPlugboard().addConnection(letter1, letter2);
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField connectionsTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel plugboardBackground;
    private javax.swing.JPanel plugboardPanel;
    // End of variables declaration//GEN-END:variables
}
