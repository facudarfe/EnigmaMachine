/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import enigma.Enigma;
import java.awt.Graphics;
import java.awt.Image;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JTextArea;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 * Panel derecho de la maquina Enigma
 * @author facud
 */
public class RightPanel extends javax.swing.JPanel {
    private JFrame parent;
    private Enigma enigma;
    private FileReader fr;

    /**
     * Crea un nuevo panel deercho
     */
    public RightPanel() {
        initComponents();
        this.fr = null;
    }
    
    /**
     * Crea un nuevo panel derecho
     * @param parent Ventana padre que lo contiene
     * @param enigma Maquina enigma
     */
    public RightPanel(JFrame parent, Enigma enigma){
        this();
        this.parent = parent;
        this.enigma = enigma;
    }
    
    @Override
    public void paintComponent(Graphics g){
        super.paintComponent(g);
        ImageIcon img = new ImageIcon(getClass().getResource("/resources/images/rightPanelBackground.jpg"));
        g.drawImage(img.getImage(), 0, 0, this);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        encryptedTextArea = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        originalTextArea = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        btnLoadRotors = new javax.swing.JLabel();
        btnReset = new javax.swing.JLabel();
        btnLoadPlugboard = new javax.swing.JLabel();
        btnCipherMessage = new javax.swing.JLabel();
        btnSave = new javax.swing.JLabel();
        btnExit = new javax.swing.JLabel();
        btnOpen = new javax.swing.JLabel();
        clear1 = new javax.swing.JLabel();
        clear2 = new javax.swing.JLabel();

        fileChooser.setFileFilter(new FileNameExtensionFilter("Texto Plano", "txt"));

        setMinimumSize(new java.awt.Dimension(600, 800));
        setPreferredSize(new java.awt.Dimension(600, 800));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("TEXTO ORIGINAL:");

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        encryptedTextArea.setColumns(20);
        encryptedTextArea.setLineWrap(true);
        encryptedTextArea.setRows(5);
        jScrollPane2.setViewportView(encryptedTextArea);

        originalTextArea.setColumns(20);
        originalTextArea.setLineWrap(true);
        originalTextArea.setRows(5);
        originalTextArea.setEnabled(false);
        jScrollPane3.setViewportView(originalTextArea);

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("TEXTO ENCRIPTADO:");

        btnLoadRotors.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/buttons/buttonLoadRotors.png"))); // NOI18N
        btnLoadRotors.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnLoadRotors.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnLoadRotorsMouseClicked(evt);
            }
        });

        btnReset.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/buttons/buttonResetEnigma.png"))); // NOI18N
        btnReset.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnReset.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnResetMouseClicked(evt);
            }
        });

        btnLoadPlugboard.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/buttons/buttonLoadPlugboard.png"))); // NOI18N
        btnLoadPlugboard.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnLoadPlugboard.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnLoadPlugboardMouseClicked(evt);
            }
        });

        btnCipherMessage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/buttons/buttonCipherMessage.png"))); // NOI18N
        btnCipherMessage.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCipherMessage.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCipherMessageMouseClicked(evt);
            }
        });

        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/buttons/buttonSave.png"))); // NOI18N
        btnSave.setToolTipText("Guardar texto cifrado");
        btnSave.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSave.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSaveMouseClicked(evt);
            }
        });

        btnExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/buttons/buttonExit.png"))); // NOI18N
        btnExit.setToolTipText("Cerrar programa");
        btnExit.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnExit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnExitMouseClicked(evt);
            }
        });

        btnOpen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/buttons/buttonOpen.png"))); // NOI18N
        btnOpen.setToolTipText("Abrir un texto");
        btnOpen.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnOpen.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnOpenMouseClicked(evt);
            }
        });

        ImageIcon icon = new ImageIcon(getClass().getResource("/resources/images/edit_clear.png"));
        clear1.setIcon(new ImageIcon(icon.getImage().getScaledInstance(20, 20, Image.SCALE_SMOOTH)));
        clear1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        clear1.setPreferredSize(new java.awt.Dimension(20, 20));
        clear1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clear1MouseClicked(evt);
            }
        });

        clear2.setIcon(new ImageIcon(icon.getImage().getScaledInstance(20, 20, Image.SCALE_SMOOTH)));
        clear2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        clear2.setPreferredSize(new java.awt.Dimension(20, 20));
        clear2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clear2MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(btnReset)
                            .addGap(28, 28, 28)
                            .addComponent(btnLoadRotors)
                            .addGap(27, 27, 27)
                            .addComponent(btnLoadPlugboard))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel1)
                            .addGap(332, 332, 332)
                            .addComponent(clear1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGap(179, 179, 179)
                            .addComponent(btnCipherMessage))
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 519, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(jLabel2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(clear2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(btnOpen)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnSave)
                            .addGap(153, 153, 153)
                            .addComponent(btnExit))
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 519, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnLoadPlugboard)
                    .addComponent(btnReset)
                    .addComponent(btnLoadRotors))
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(clear1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(btnCipherMessage)
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnSave)
                            .addComponent(btnExit)
                            .addComponent(btnOpen)))
                    .addComponent(clear2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnExitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnExitMouseClicked
        System.exit(0);
    }//GEN-LAST:event_btnExitMouseClicked

    private void btnLoadRotorsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnLoadRotorsMouseClicked
        RotorsChoice choice = new RotorsChoice(this.parent, this.enigma);
        choice.setVisible(true);
    }//GEN-LAST:event_btnLoadRotorsMouseClicked

    private void btnLoadPlugboardMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnLoadPlugboardMouseClicked
        PlugboardUI plugboard = new PlugboardUI(this.parent, this.enigma);
        plugboard.setVisible(true);
    }//GEN-LAST:event_btnLoadPlugboardMouseClicked

    private void btnResetMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnResetMouseClicked
        this.enigma.resetEnigma();
        ((EnigmaMain)this.parent).getMachine().moveRotors();
    }//GEN-LAST:event_btnResetMouseClicked

    private void btnOpenMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnOpenMouseClicked
        int opc = this.fileChooser.showOpenDialog(this.parent);
        
        if(opc == JFileChooser.APPROVE_OPTION){
            try {
                this.fr = new FileReader(this.fileChooser.getSelectedFile());
                this.originalTextArea.setText(getTextFromFile());
            } catch (FileNotFoundException ex) {
                Logger.getLogger(RightPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnOpenMouseClicked

    private void btnCipherMessageMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCipherMessageMouseClicked
        String text = this.originalTextArea.getText();
        if (!text.equals("")) {
            this.encryptedTextArea.setText("");
            CipherThread hilo = new CipherThread();
            hilo.start();
        }
    }//GEN-LAST:event_btnCipherMessageMouseClicked

    private void btnSaveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSaveMouseClicked
        int opc = this.fileChooser.showSaveDialog(this.parent);
        
        if(opc == JFileChooser.APPROVE_OPTION){
            try {
                FileWriter fw = new FileWriter(this.fileChooser.getSelectedFile());
                fw.write(this.encryptedTextArea.getText());
                fw.close();
            } catch (IOException ex) {
                Logger.getLogger(RightPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnSaveMouseClicked

    private void clear1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clear1MouseClicked
        this.originalTextArea.setText("");
    }//GEN-LAST:event_clear1MouseClicked

    private void clear2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clear2MouseClicked
        this.encryptedTextArea.setText("");
    }//GEN-LAST:event_clear2MouseClicked
    
    /**
     * Obtener el texto que contiene un determinado archivo
     * @return Texto del archivo
     */
    private String getTextFromFile() {
        String text = "";
        
        if (this.fr != null) {
            BufferedReader br = new BufferedReader(this.fr);
            try {
                String line;
                while((line = br.readLine()) != null){
                    text += line;
                }
                this.fr.close();
                br.close();
            } catch (IOException ex) {
                Logger.getLogger(RightPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return text;
    }
    
    public void addTextOriginalTextArea(String text){
        this.originalTextArea.setText(this.originalTextArea.getText()+text);
    }
    
    public void addTextEncryptedTextArea(String text){
        this.encryptedTextArea.setText(this.encryptedTextArea.getText()+text);
    }
    
    public JTextArea getOriginalTextArea() {
        return originalTextArea;
    }

    public JTextArea getEncryptedTextArea() {
        return encryptedTextArea;
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel btnCipherMessage;
    private javax.swing.JLabel btnExit;
    private javax.swing.JLabel btnLoadPlugboard;
    private javax.swing.JLabel btnLoadRotors;
    private javax.swing.JLabel btnOpen;
    private javax.swing.JLabel btnReset;
    private javax.swing.JLabel btnSave;
    private javax.swing.JLabel clear1;
    private javax.swing.JLabel clear2;
    private javax.swing.JTextArea encryptedTextArea;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea originalTextArea;
    // End of variables declaration//GEN-END:variables
    
    /**
     * Clase interna que lanza un hilo e ira cifrando a la vez que haciendo las animaciones
     */
    private class CipherThread extends Thread {

        @Override
        public void run() {
            String text = RightPanel.this.originalTextArea.getText();
            for (int i = 0; i < text.length(); i++) {
                char letter = text.charAt(i);
                char encryptedLetter = ((EnigmaMain) RightPanel.this.parent).getMachine().keyDownCircuit(letter);
                try {
                    Thread.sleep(400);
                } catch (InterruptedException ex) {
                    Logger.getLogger(RightPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
                addTextEncryptedTextArea(encryptedLetter + "");
                ((EnigmaMain) RightPanel.this.parent).getMachine().keyUpCircuit(letter);
            }
        }
    }
}
