/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import java.util.Map;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import enigma.Enigma;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.InputVerifier;
import javax.swing.JComponent;
import javax.swing.JTextField;
import java.io.IOException;
import java.net.URL;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;

/**
 *
 * @author facud
 */
public class Machine extends javax.swing.JPanel{
    private EnigmaMain parent;
    private Enigma enigma;
    private char encryptedChar;
    private boolean keyPressed = false;
    private Map<Character, JLabel> keysMap;
    private Map<Character, JLabel> ledsMap;
    private final ImageIcon ROTOR1 = new ImageIcon(getClass().getResource("/resources/images/rotor1.png"));
    private final ImageIcon ROTOR2 = new ImageIcon(getClass().getResource("/resources/images/rotor2.png"));
    
    /**
     * Creates new form Machine
     */
    public Machine() {
        initComponents();
        keysMap = keyboard.getLetters();
        ledsMap = leds.getLetters();
    }
    
    public Machine(EnigmaMain parent, Enigma enigma){
        this();
        this.parent = parent;
        this.enigma = enigma;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        imageRightRotor = new javax.swing.JLabel();
        imageMiddleRotor = new javax.swing.JLabel();
        imageLeftRotor = new javax.swing.JLabel();
        letterRightRotor = new javax.swing.JTextField();
        letterMiddleRotor = new javax.swing.JTextField();
        letterLeftRotor = new javax.swing.JTextField();
        leds = new GUI.Leds();
        keyboard = new GUI.Keyboard();
        backgroundImage = new javax.swing.JLabel();

        setMaximumSize(new java.awt.Dimension(688, 800));
        setMinimumSize(new java.awt.Dimension(688, 800));
        setPreferredSize(new java.awt.Dimension(688, 800));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                formKeyReleased(evt);
            }
        });
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        imageRightRotor.setIcon(this.ROTOR1);
        add(imageRightRotor, new org.netbeans.lib.awtextra.AbsoluteConstraints(393, 127, -1, -1));

        imageMiddleRotor.setIcon(this.ROTOR1);
        add(imageMiddleRotor, new org.netbeans.lib.awtextra.AbsoluteConstraints(318, 127, -1, -1));

        imageLeftRotor.setIcon(this.ROTOR1);
        add(imageLeftRotor, new org.netbeans.lib.awtextra.AbsoluteConstraints(243, 127, -1, -1));

        letterRightRotor.addActionListener(new TextFieldsListener());
        letterRightRotor.setBackground(new Color(0, 0, 0, 0));
        letterRightRotor.setFont(new java.awt.Font("Dialog", 0, 20)); // NOI18N
        letterRightRotor.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        letterRightRotor.setText("A");
        letterRightRotor.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        letterRightRotor.setName(""); // NOI18N
        letterRightRotor.setOpaque(false);
        add(letterRightRotor, new org.netbeans.lib.awtextra.AbsoluteConstraints(345, 187, 34, 50));

        letterMiddleRotor.addActionListener(new TextFieldsListener());
        letterMiddleRotor.setBackground(new Color(0, 0, 0, 0));
        letterMiddleRotor.setFont(new java.awt.Font("Dialog", 0, 20)); // NOI18N
        letterMiddleRotor.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        letterMiddleRotor.setText("A");
        letterMiddleRotor.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        letterMiddleRotor.setName(""); // NOI18N
        letterMiddleRotor.setOpaque(false);
        add(letterMiddleRotor, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 187, 34, 50));

        letterLeftRotor.addActionListener(new TextFieldsListener());
        letterLeftRotor.setBackground(new Color(0, 0, 0, 0));
        letterLeftRotor.setFont(new java.awt.Font("Dialog", 0, 20)); // NOI18N
        letterLeftRotor.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        letterLeftRotor.setText("A");
        letterLeftRotor.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        letterLeftRotor.setName(""); // NOI18N
        letterLeftRotor.setOpaque(false);
        add(letterLeftRotor, new org.netbeans.lib.awtextra.AbsoluteConstraints(194, 187, 34, 50));
        add(leds, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 330, -1, -1));
        add(keyboard, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 540, -1, -1));

        backgroundImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/enigmaMachine.png"))); // NOI18N
        add(backgroundImage, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 690, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        if(!keyPressed){
            this.keyPressed = true;
            char key = evt.getKeyChar();
            char encryptedLetter;
            
            encryptedLetter = keyDownCircuit(key);
            parent.getRightPanel().addTextOriginalTextArea(key+"");
            parent.getRightPanel().addTextEncryptedTextArea(encryptedLetter+"");        
        }
    }//GEN-LAST:event_formKeyPressed

    private void formKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyReleased
        this.keyPressed = false;
        char key = evt.getKeyChar();
        
        keyUpCircuit(key);
    }//GEN-LAST:event_formKeyReleased

    public char keyDownCircuit(char key) {
        char keyUpper = Character.toUpperCase(key);
        JLabel keyLabel = keysMap.get(keyUpper);
        char returnChar = key;

        if (keyLabel != null) {
            try {
                playSound("/resources/sounds/key-down.wav");
            } catch (UnsupportedAudioFileException | IOException | LineUnavailableException ex) {
                Logger.getLogger(Machine.class.getName()).log(Level.SEVERE, null, ex);
            }

            keyLabel.setIcon(new ImageIcon(getClass().getResource("/resources/images/keys/"
                    + "key" + keyUpper + "pressed.png")));
            char encryptedLetter = enigma.encryptLetter(keyUpper);
            this.encryptedChar = encryptedLetter;

            JLabel led = ledsMap.get(encryptedLetter);
            led.setIcon(new ImageIcon(getClass().getResource("/resources/images/"
                    + "leds/led" + encryptedLetter + "on.png"))); 
            returnChar = encryptedLetter;
        }
        return returnChar;
    }
    
    public void keyUpCircuit(char key) {
        char keyUpper = Character.toUpperCase(key);
        JLabel keyLabel = keysMap.get(keyUpper);
        
        if (keyLabel != null) {
            try {
                playSound("/resources/sounds/key-up.wav");
            } catch (UnsupportedAudioFileException | IOException | LineUnavailableException ex) {
                Logger.getLogger(Machine.class.getName()).log(Level.SEVERE, null, ex);
            }
            keyLabel.setIcon(new ImageIcon(getClass().getResource("/resources/images/keys/"
                    + "key" + keyUpper + "released.png")));
            JLabel led = ledsMap.get(this.encryptedChar);
            led.setIcon(new ImageIcon(getClass().getResource("/resources/images/"
                    + "leds/led" + this.encryptedChar + "off.png")));
            moveRotors();
        }
    }
    
    private void playSound(String path) throws UnsupportedAudioFileException, IOException, LineUnavailableException {
        URL url = getClass().getResource(path);
        AudioInputStream audioIn = AudioSystem.getAudioInputStream(url);
        Clip clip = AudioSystem.getClip();
        clip.open(audioIn);
        clip.start();
    }
    
    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        this.requestFocusInWindow();
    }//GEN-LAST:event_formMouseClicked
    
    private void placeRotor(JTextField field){
        Character letter = Character.toUpperCase(field.getText().charAt(0));
        
        //Chequeo cual campo es en el que se ejecuto el evento y muevo el rotor correspondiente
        if(field.equals(this.letterLeftRotor)){
            this.enigma.getLeftRotor().positionRotor(letter);
        }
        else{
            if(field.equals(this.letterMiddleRotor)){
                this.enigma.getMiddleRotor().positionRotor(letter);
            }
            else{
                this.enigma.getRightRotor().positionRotor(letter);
            }
        }
        /*Si se modifico el valor en cualquiera de los tres campos se resetean 
        la cantidad de movimientos restantes de todos los rotores*/
        this.enigma.getLeftRotor().setRemainingMoves(this.enigma.getLeftRotor().getMoves());
        this.enigma.getMiddleRotor().setRemainingMoves(this.enigma.getLeftRotor().getMoves());
        this.enigma.getMiddleRotor().setRemainingMoves(this.enigma.getLeftRotor().getMoves());
        
        //Seteo el campo nuevamente con la letra pero en mayusculas
        field.setText(letter.toString());
        this.requestFocusInWindow();
    }
    
    /**
     * Cambia el valor de los JTextField de los rotores y ejecuta la animacion
     * de mover el rotor
     */
    public void moveRotors(){
        //Mover la letra en los campos de texto
        Character letterLeft = this.enigma.getLeftRotor().getOuterRotor().charAt(0);
        Character letterMiddle = this.enigma.getMiddleRotor().getOuterRotor().charAt(0);
        Character letterRight = this.enigma.getRightRotor().getOuterRotor().charAt(0);
        
        this.letterLeftRotor.setText(letterLeft.toString());
        this.letterMiddleRotor.setText(letterMiddle.toString());
        this.letterRightRotor.setText(letterRight.toString());
        
        //Crear la animacion del rotor girando
        int moves = this.enigma.getRightRotor().getMoves();
        
        if(this.imageRightRotor.getIcon().equals(ROTOR1))
            this.imageRightRotor.setIcon(ROTOR2);
        else
            this.imageRightRotor.setIcon(ROTOR1);
        if(this.enigma.getRightRotor().getRemainingMoves() == moves){
            if(this.imageMiddleRotor.getIcon().equals(ROTOR1))
                this.imageMiddleRotor.setIcon(ROTOR2);
            else
                this.imageMiddleRotor.setIcon(ROTOR1);
        }
        if(this.enigma.getMiddleRotor().getRemainingMoves() == moves && this.enigma.getRightRotor()
                .getRemainingMoves() == moves){
            if(this.imageLeftRotor.getIcon().equals(ROTOR1))
                this.imageLeftRotor.setIcon(ROTOR2);
            else
                this.imageLeftRotor.setIcon(ROTOR1); 
        } 
    }
    
    public Keyboard getKeyBoard(){
        return this.keyboard;
    }
    
    private boolean verifyInput(JTextField field){
        Pattern p = Pattern.compile("[A-Za-z0-9\\s]");
        Matcher m = p.matcher(field.getText());
        
        return m.matches();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel backgroundImage;
    private javax.swing.JLabel imageLeftRotor;
    private javax.swing.JLabel imageMiddleRotor;
    private javax.swing.JLabel imageRightRotor;
    private GUI.Keyboard keyboard;
    private GUI.Leds leds;
    private javax.swing.JTextField letterLeftRotor;
    private javax.swing.JTextField letterMiddleRotor;
    private javax.swing.JTextField letterRightRotor;
    // End of variables declaration//GEN-END:variables

    private class TextFieldsListener implements ActionListener{

        @Override
        public void actionPerformed(ActionEvent e) {
            JTextField field = (JTextField)e.getSource();
            
            if(verifyInput(field)){
                placeRotor(field);
            }
            else{
                field.setText("A");
            }
        }
   
    }
    
}
